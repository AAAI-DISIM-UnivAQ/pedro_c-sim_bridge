
% the distances used in sonar and vision are from the emumeration
% dist0, dist1, dist2, dist3, dist4, dist5, dist6
% where dist0 is very close and dist6 is the largest distance
% sonar( L, C, R ) , Left, Center and Right sensor readings
% assuming all are from the distance enumeration
% vision ( Direction, Dist ) red bottle detection
% Direction: center|left|right|close
% Dist is from the distance enumeration

def durative ::=
    move_forward(num) | turn(turn_dir, num) | display(num)

def visdir ::= close|left|right|center

def turn_dir ::= left | right

def distance ::= dist0 | dist1 | dist2 | dist3 | dist4 | dist5 | dist6

percept sonar( distance, distance, distance ), vision( visdir, distance)

rel larger_dist(distance, distance)
larger_dist(dist1, dist0)
larger_dist(dist2, dist0)
larger_dist(dist2, dist1)
larger_dist(dist3, dist0)
larger_dist(dist3, dist1)
larger_dist(dist3, dist2)
larger_dist(dist4, dist0)
larger_dist(dist4, dist1)
larger_dist(dist4, dist2)
larger_dist(dist4, dist3)
larger_dist(dist5, dist0)
larger_dist(dist5, dist1)
larger_dist(dist5, dist2)
larger_dist(dist5, dist3)
larger_dist(dist5, dist4)
larger_dist(dist6, dist0)
larger_dist(dist6, dist1)
larger_dist(dist6, dist2)
larger_dist(dist6, dist3)
larger_dist(dist6, dist4)
larger_dist(dist6, dist5)

% rel front_free()
% front_free() <=
%     sonar(L, dist6, R) &
%     larger_dist(L, dist1) &
%     larger_dist(R, dist1)

% rel left_free()
% left_free() <=
%     sonar(L, _, R) &
%     larger_dist(L, dist4) &
%     larger_dist(L, R)

% rel right_free()
% right_free() <=
%     sonar(L, _, R) &
%     larger_dist(R, dist4) &
%     larger_dist(R, L)

rel close_wall(?turn_dir), close_wall_right(),  cornered()

%% wall at distance dist0, dist1, dist2, dist3
close_wall(left) <=
    sonar(R, _, _) & larger_dist(dist4, R) & not vision(left, _)
close_wall(right) <=
    sonar(_, _, R) & larger_dist(dist4, R) & not vision(right, _)

cornered() <=
    close_wall(left) &
    close_wall(right)

   

tel wander(), get_to_bottle(), approach_bottle()

get_to_bottle() {
    %% the bottle is seen and can be approached without hitting a wall
    vision(_, _) ~> approach_bottle()
    
    
    %% if the above rule is added then this rule would be for searching 
    %% for a bottle
    true  ~> wander()
}

fun op_dir(turn_dir) -> turn_dir
op_dir(left) -> right
op_dir(right) -> left

%% precondition: vision(_, _) is true 
approach_bottle() {
    %% next to bottle - finished
    vision(_, dist0) ~> ()++ bottle_found to vrep_pedro 
    
    %% wiggle away from wall
    vision(center, _) & close_wall(Dir) min_time 3 ~>
            [turn(op_dir(Dir),0.4):1, move_forward(1.4):1, turn(Dir,0.4):1]

    %% turn away from left wall
    close_wall(Dir) min_time 0.4 ~> turn(op_dir(Dir),0.2)
    
    %%move towards bottle in center
    vision(center, _) ~>  move_forward(0.5)
    
    %% turn towards bottle
    vision(left, D)  min_time 0.4 ~> turn(left, approach_roatation_speed(D))
    
    vision(right, D)  min_time 0.4 ~> turn(right, approach_roatation_speed(D))
    }

fun approach_roatation_speed(distance) -> num
approach_roatation_speed(dist0) -> 0.0
approach_roatation_speed(dist1) -> 0.05
approach_roatation_speed(dist2) -> 0.1
approach_roatation_speed(dist3) -> 0.15
approach_roatation_speed(dist4) -> 0.2
approach_roatation_speed(dist5) -> 0.4

fun random_dir() -> turn_dir
random_dir() :: random_num() > 0.5 -> left
random_dir() -> right

wander() {
    %% to escape a corner it would be good to turn 180 and move away
    %% to do this we ned the turn right speed/time to be callibrated 
    %% so that turning at this speed to the given time will produce
    %% about a 180 turn
    cornered() min_time 4 ~> [move_forward(-0.2):2, turn(random_dir(), 0.6):2]

    %% move away fom wall
    close_wall(Dir) min_time 0.2 ~> turn(op_dir(Dir),0.2)

    
    %% we are not cornered or close to a wall on the left or right
    %% but there is a close wall in front - e.g a doorway
    sonar(_, C, _) &  larger_dist(dist4, C) min_time 3 ~> 
            [move_forward(-0.3):1, turn(random_dir(), 0.3):1, move_forward(0.3)]
       

    true ~> move_forward(1)
    
    }

act go()
go() ~>
    start_agent( vrep_pedro, all ) ;
% Name robot_wanderer is given to TeleoR process when launched with a command
% teleor -Arobot_wanderer
    start_task(wander_around, get_to_bottle())

